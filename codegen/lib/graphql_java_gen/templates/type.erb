<%= class_head %>

<% fields.each do |field| %>
  <% if class_name.downcase.include?('mutation') %>
    <%= "import #{where.gsub('/', '.')}.#{to_package(field.classify_name.underscore.singularize)}.*;" %>
    <% mutations.each do |m| %>
      <%= "import #{where.gsub('/', '.')}.#{m}.*;" %>
    <% end unless mutations.nil? %>
  <% end %>
<% end %>

<%= java_doc(type, author: true) %>
public class <%= class_name %> extends AbstractResponse<<%= class_name %>> <%= java_implements(type) %>{

    <%= render_java_doc(
      "Constructor",
      "@param fields pulled in from the API",
      "@throws SchemaViolationError if the supplied data is invalid"
    ) %>
    public <%= class_name %>(JsonObject fields) throws SchemaViolationError {
      for (Map.Entry<String, JsonElement> field : fields.entrySet()) {
        String key = field.getKey();
        String fieldName = getFieldName(key);
        switch (fieldName) {
          <% fields.each do |field| %>
            case "<%= field.name %>": {
              try {
                <% generate_build_output_code("field.getValue()", field.type) do |statements, expr| %>
                  <%= statements %>
                  responseData.put(key, <%= expr %>);
                <% end %>
              } catch (Exception e) {
                throw new SchemaViolationError(this, key, field.getValue());
              }
              break;
            }
          <% end %>
          case "__typename": {
            responseData.put(key, jsonAsString(field.getValue(), key));
            break;
          }
          default: {
            throw new SchemaViolationError(this, key, field.getValue());
          }
        }
      }
    }

    <% if type.object? && type.implement?("Node") %>
        public <%= class_name %>(<%= scalars['ID'].non_nullable_type %> id) {
          this();
          optimisticData.put("id", id);
        }
    <% end %>

    <% if type.object? %>
        <%= render_java_doc(
          "Get the name of this object",
          "@return the name of this object as defined by the graph API"
        ) %>
        public String getGraphQlTypeName() {
            return "<%= type.name %>";
        }
    <% else %>
        <%= render_java_doc(
          "Create this object using API data.",
          "@param fields pulled in from the API",
          "@return the created object from the API"
        ) %>
        public static <%= type.name %> create(JsonObject fields) throws SchemaViolationError {
            String typeName = fields.getAsJsonPrimitive("__typename").getAsString();
            switch (typeName) {
                <% type.possible_types.each do |possible_type| %>
                    case "<%= possible_type.name %>": {
                        return new <%= possible_type.name %>(fields);
                    }
                <% end %>
                default: {
                    return new <%= class_name %>(fields);
                }
            }
        }

        <%= render_java_doc(
          "Get the name of this object",
          "@return the name of this object as defined by the graph API"
        ) %>
        public String getGraphQlTypeName() {
            return (String) get("__typename");
        }
    <% end %>

    <% fields.each do |field| %>
        <%= java_doc(field) %>
        <%= java_annotations(field) %>
        <% type = java_output_type(field.type) %>
        <% isBool = type == "Boolean" %>
        <% name = field.classify_name %>
        <% startIs = name.include?("Is") || name.include?("Has") %>
        public <%= type %> <%= isBool ? "" : "get" %><%= isBool ? (startIs ? name.camelize(:lower) : 'is' + name) : field.classify_name %>() {
          return (<%= java_output_type(field.type) %>) get("<%= field.name %>");
        }

        <% next if field.name == "id" %>
        <% prefix = "" %>
        <% prefix = (field.type == "Boolean" ? "if" : "the") unless (field.description.start_with?("If") || field.description.start_with?("The")) %>
        <%= render_java_doc(
          "Set #{prefix} #{field.description.downcase}",
          "@param arg new value to set",
          "@return this object, with the new value"
        ) %>
        public <%= class_name %> set<%= field.classify_name %>(<%= java_output_type(field.type) %> arg) {
          optimisticData.put(getKey("<%= field.name %>"), arg);
          return this;
        }
    <% end %>

      <%= render_java_doc(
        "Check if the given key can be unwrapped to an object",
        "@param key to check",
        "@return if the key can be unwrapped"
      ) %>
      public boolean unwrapsToObject(String key) {
        switch (getFieldName(key)) {
          <% fields.each do |field| %>
            case "<%= field.name %>": return <%= field.type.unwrap.object? %>;
          <% end %>
          default: return false;
        }
      }

      @Override
      public String toString() {
        return "<%= class_name %>{" +
          <% fields.each do |field| %>
            "<%= field.name %>=" + get("<%= field.name %>") +
          <% end %>
          "} " + super.toString();
      }
}
